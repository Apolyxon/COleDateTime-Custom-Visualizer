{
    Copyright (c) Microsoft. All rights reserved.
    Licensed under the MIT license. See LICENSE file in the project root for full license information.

    Simple Tic-Tac-Toe program to demonstrate the Iris compiler and debugger integration.
}

program TicTacToe;

var
    board : array[0..8] of integer;
    movesMade : integer;
    player : integer;

{ Get the string to show for a cell of the board. }
function GetCellString(i : integer) : string;
begin
    if board[i] = 0 then
        GetCellString := ' '
    else if board[i] = 1 then
        GetCellString := 'X'
    else if board[i] = -1 then
        GetCellString := 'O'
    else
        GetCellString := '?'
end

{ Print out the Tic-Tac-Toe board. }
procedure PrintBoard;
var
    row, rowEnd : string;
    i : integer;
begin
    writeln('+ - + - + - +');
    row := '| ';
    for i := 1 to 9 do
    begin
        row := row + GetCellString(i - 1);
        row := row + ' | ';
        rowEnd := rowEnd + str(i) + '   ';
        if i % 3 = 0 then
        begin
            writeln(row + '      ' + rowEnd);
            writeln('+ - + - + - +');
            if i <> 8 then
            begin
                row := '| ';
                rowEnd := '';
            end;
        end;
    end;
end

{ Make the next move at the given location. }
procedure MakeMove(location : integer);
begin
    board[location] := player;
    player := -player;
    movesMade := movesMade + 1;
end

{ Undo the previous move at the given location. }
procedure UndoMove(location : integer);
begin
    movesMade := movesMade - 1;
    board[location] := 0;
    player := -player;
end

{
    Determine if there is a winner and if so, return the winning player number.
    If no winner, this function returns 0.
}
function Winner : integer;
var
    sum : integer;
begin
    sum := -player * 3;

    if (board[0] + board[1] + board[2]) = sum then
        Winner := -player
    else if (board[3] + board[4] + board[5]) = sum then
        Winner := -player
    else if (board[6] + board[7] + board[8]) = sum then
        Winner := -player
    else if (board[0] + board[3] + board[6]) = sum then
        Winner := -player
    else if (board[1] + board[4] + board[7]) = sum then
        Winner := -player
    else if (board[2] + board[5] + board[8]) = sum then
        Winner := -player
    else if (board[0] + board[4] + board[8]) = sum then
        Winner := -player
    else if (board[2] + board[4] + board[6]) = sum then
        Winner := -player
end

{ Determine if the game is over and print a message if it is. }
function IsGameOver : boolean;
var
    winner : integer;
begin
    winner := Winner();
    if winner <> 0 then
    begin
        if winner = 1 then
            writeln('X wins!')
        else
            writeln('O wins!');
        IsGameOver := true;
    end
    else
    begin
        if movesMade = 9 then
        begin
            writeln('Game is a draw');
            IsGameOver := true;
        end
    end
end

{ Convert the given textual square number into an integer square number. }
function Square(text : string) : integer;
begin
    if text = '1' then
        Square := 1
    else if text = '2' then
        Square := 2
    else if text = '3' then
        Square := 3
    else if text = '4' then
        Square := 4
    else if text = '5' then
        Square := 5
    else if text = '6' then
        Square := 6
    else if text = '7' then
        Square := 7
    else if text = '8' then
        Square := 8
    else if text = '9' then
        Square := 9
end

{
    Search the game tree for the best move.  This is the "AI" part of the Tic-Tac-Toe program.
    It uses a simple min/max algorithm and is good for showing off the debugger because it uses
    recursion and a pass-by-reference variable.
}
function Search(root : boolean; var computerMove : integer) : integer;
var
    winner, move, score, nextMove : integer;
begin
    winner := Winner();
    if winner <> 0 then
        Search := winner * player
    else
    begin
        if movesMade <> 9 then
        begin
            Search := -2;
            for move := 0 to 8 do
            begin
                if board[move] = 0 then
                begin
                    MakeMove(move);

                    score := -Search(false, nextMove);

                    if score > Search then
                    begin
                        Search := score;
                        if root then computerMove := move;
                    end;

                    UndoMove(move);
                end;
            end;
        end; // movesMade <> 9
    end; // if winner <> 0
end

{ Have the computer make a move. }
procedure MakeComputerMove;
var
    computerMove : integer
begin
    if movesMade = 0 then
        MakeMove(rand() % 9)
    else
    begin
        Search(true, computerMove);
        MakeMove(computerMove);
    end
end

{ The main game loop while a game is in progress. }
procedure PlayGame(userPlayer : integer);
var
    i : integer;
    gameOver : boolean;
    playSquare : integer;
    input : string;
    accepted : boolean;
begin
    for i := 0 to 8 do
        board[i] := 0;

    player := 1;
    movesMade := 0;

    repeat
        if not gameOver then
        begin
            gameOver := IsGameOver;
            if (not gameOver) and (player <> userPlayer) then
            begin
                MakeComputerMove;
                gameOver := IsGameOver;
            end;
        end;

        writeln('');
        PrintBoard;
        writeln('');

        if not gameOver then
        begin
            playSquare := 0;
            accepted := false;
            repeat
                writeln('Enter square number to play (1-9):');
                input := readln;
                playSquare := Square(input);
                if playSquare <> 0 then
                begin
                    playSquare := playSquare - 1;
                    if board[playSquare] <> 0 then
                        writeln('That square is already occupied')
                    else
                        accepted := true;
                end;
            until accepted;

            MakeMove(playSquare);
        end;

    until gameOver;
end

{ The main loop for the program.  Each iteration of the loop gets the user player and then runs the game loop above. }
procedure Run;
var
    done : boolean;
    userPlayer : integer;
    accepted : boolean;
    input : string;
begin
    repeat
        writeln('Welcome to Tic-Tac-Toe.  Do you want to play X or O? (Q to quit)?');
        userPlayer := 0;
        accepted := false;
        repeat
            accepted := true;
            input := readln;
            if input = 'q' or input = 'Q' then
                done := true
            else if input = 'x' or input = 'X' then
                userPlayer := 1
            else if input = 'o' or input = 'O' then
                userPlayer := -1
            else
                accepted := false;
        until accepted;

        if not done then
            PlayGame(userPlayer);
    until done;
end

begin
    Run;
end.